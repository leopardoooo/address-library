<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	default-autowire="byName"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
     
    <!-- 动态数据源配置，该项配置依赖于统一配置的数据 -->
	<bean id="dataSource" class="com.easyooo.framework.sharding.ModulusRoutingDataSource" />
	
	<!-- 此AOP代理主要负责提取Mapper分库的配置信息 -->
	<bean id="shardingAspect" class="com.easyooo.framework.sharding.ShardingContextAspect">
		<property name="shardingContextExecutor" ref="shardingContextExecutor" />
	</bean>
	<bean id="shardingContextExecutor" class="com.easyooo.framework.sharding.ShardingContextExecutor" />
	
	<!-- 
		缓存代理 , RedisTemplate 依赖统一配置解析生成的factoryBean Key
	 -->
	<bean id="chainBuilder" class="com.easyooo.framework.cache.impl.CacheChainBuilder">
    	<property name="redisTemplate">
    		<bean class="com.easyooo.framework.support.redis.RedisTemplate">
				<property name="redisOperation">
					<bean class="com.easyooo.framework.support.redis.shard.ShardedJedisOperation">
						<property name="shardedJedisFactoryBeanKey" value="tableRedisClient" />
					</bean>
				</property>
			</bean>
    	</property>
    	<property name="updateCommandProducer">
    		<bean class="com.easyooo.framework.cache.transaction.UpdateCommandProducer">
    			<!-- 根据类型自动注入DefaultMQProducer -->
    		</bean>
    	</property>
    	<!-- 开启缓存事务 -->
    	<property name="transaction" value="true" />
    </bean> 
    <!-- 缓存同步客户端唯一标识生成器 -->
    <bean class="com.easyooo.framework.cache.transaction.ClientIdGenerator">
    	<!-- 使用默认的IP地址+进程号 -->
    </bean>
    
    <bean id="cacheAspect" class="com.easyooo.show.data.support.CacheAspect">
		<property name="executor">
			<bean class="com.easyooo.framework.cache.spring.CacheAspectExecutor"
				p:chainBuilder-ref="chainBuilder"/>
		</property>
	</bean>
	
	
	<!-- 缓存JVM同步 -->
	<bean class="com.easyooo.show.data.support.JvmCacheConsumerFactoryBean">
		<property name="producerClientFactoryBeanKey">
			<value>producerClientFactoryBeanByZk</value>
		</property>
		<property name="applicationName" value="${application.name}" />
	</bean>

	<!-- redis operation -->
	<bean id="entityRedisTemplate" class="com.easyooo.show.commons.support.EntityRedisTemplate">
		<property name="redisOperation">
			<bean class="com.easyooo.framework.support.redis.jedis.JedisOperation">
				<property name="jedisFactoryBeanKey" value="busiRedisClient" />
			</bean>
		</property>
	</bean>
	
	<!-- selector manager -->
	<bean id="selectorManager" 
		class="com.easyooo.show.data.support.redis.SelectorManager">
		<constructor-arg index="0">
			<ref local="entityRedisTemplate" />
		</constructor-arg>
	</bean>
	
	<!-- Mybatis SqlSessionFactory -->
	<bean id="defaultSqlSessionFactory" class="com.easyooo.show.data.support.SelfishMyBatisFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 接管 MyBatis Spring Transaction -->
		<property name="transactionFactory">
    		<bean class="com.easyooo.framework.sharding.transaction.RountingManagedTransactionFactory" />
  		</property> 
		<property name="mapperLocations" value="classpath*:com/easyooo/show/data/sqlmap/**/*.xml" />
		<property name="plugins">
			<list>
				<!-- paging plugins -->
				<bean class="com.easyooo.framework.support.mybatis.PaginationPlugin"
					p:dbms="mysql"/>
			</list>
		</property>
	</bean>

	<!-- 
		scan for mappers and let them be autowired
		important: 如果使用了default-autowire="byName"，SqlSessionFactoryBean的Bean Id
		一定不能叫sqlSessionFactory，因为SqlSessionFactory会通过名称自动装配到MapperScannerConfigurer，
		这会造成DataSouce的Properties无法替换的情况。
		@see http://mybatis.github.io/spring/zh/mappers.html#MapperScannerConfigurer
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.easyooo.show.data.persistence" />
		<property name="annotationClass" value="com.easyooo.show.data.support.Repository" />
		<property name="sqlSessionFactoryBeanName" value="defaultSqlSessionFactory" />
	</bean>
	
	<!-- 分发查询器 -->
	<bean id="dispatchQuerySupport" class="com.easyooo.show.data.support.dispatch.DispatchQuerySupport">
		<property name="sqlSessionTemplate">
			<bean class="org.mybatis.spring.SqlSessionTemplate">
				<constructor-arg index="0">
					<ref local="defaultSqlSessionFactory" />
				</constructor-arg>
			</bean>
		</property>
		<property name="shardingContextExecutor" ref="shardingContextExecutor"/>
	</bean>
</beans>
